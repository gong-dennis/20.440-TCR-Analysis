legend.labs = c("Long NACT", "No NACT", "Short NACT"),
xlab = "Months After Surgery",
ylab = "Survival probability",
ggtheme = custom_main_plot_theme)
# Plot the Kaplan-Meier curve using ggplot2
km_plot <- ggsurvplot(km_fit,
data = patients_data,
palette = c("#E69F00", "#56B4E9", "#009E73"),
risk.table = FALSE,
pval = TRUE,
conf.int = FALSE,
legend.labs = c("Long NACT", "No NACT", "Short NACT"),
xlab = "Months After Surgery",
ylab = "Survival probability",
ggtheme = custom_main_plot_theme)
print(km_plot)
# Plot the Kaplan-Meier curve using ggplot2
ggsurvplot(km_fit,
data = patients_data,
palette = c("#E69F00", "#56B4E9", "#009E73"),
risk.table = FALSE,
pval = FALSE,
conf.int = FALSE,
legend.labs = c("Long NACT", "No NACT", "Short NACT"),
xlab = "Months After Surgery",
ylab = "Survival probability",
ggtheme = custom_main_plot_theme)
# Logo plots
ggseqlogo(cluster6063, method = 'prob' )
library(ggseqlogo)
# Logo plots
ggseqlogo(cluster6063, method = 'prob' )
# Broadly expressed
cluster5380 <- test %>% filter(cluster == 5380) %>% pull(junction_aa)
ggseqlogo(cluster5380, method = 'prob' )
metadata$survivor <- "Long Term"
metadata$survivor[metadata$survival_months < 50] <- "Short Term"
# Create jitterplot with mean overlay and statistical significance
ggplot(metadata, aes(x = survivor, y = aa_richness, color = survivor)) +
geom_boxplot(width = 0.2) +
geom_jitter(width = 0.2, height = 0, alpha = 0.8) +
scale_color_manual(values = c("#C1E1C5", "#FF9F80")) +
labs(x = "", y = "Unique Amino Acid Sequences") +
theme_classic() +
theme(legend.position = "none") +
geom_signif(comparisons = list(c("Short Term", "Long Term")),
#c("Short Interval", "Long Interval"),
#c("No NACT", "Long Interval")),
map_signif_level = TRUE, color = "black")
metadata$survivor <- factor(metadata$survivor, levels=c("Short Term", "Long Term"))
# Create jitterplot with mean overlay and statistical significance
ggplot(metadata, aes(x = survivor, y = aa_richness, color = survivor)) +
geom_boxplot(width = 0.2) +
geom_jitter(width = 0.2, height = 0, alpha = 0.8) +
scale_color_manual(values = c("#C1E1C5", "#FF9F80")) +
labs(x = "", y = "Unique Amino Acid Sequences") +
theme_classic() +
theme(legend.position = "none") +
geom_signif(comparisons = list(c("Short Term", "Long Term")),
#c("Short Interval", "Long Interval"),
#c("No NACT", "Long Interval")),
map_signif_level = TRUE, color = "black")
view(metadata)
library(tidyverse)
library(LymphoSeq2)
library(ggplot2)
library(gridExtra)
library(tableone)
library(ggstance)
library(tidytext)
library(forcats)
setwd("~/Documents/GitHub/20.440-TCR-Analysis/notebook")
# Read in metadata
metadata <- read.csv("../data/processed/precalculated.tsv", sep = "\t")
metadata$survivor <- "Long Term"
metadata$survivor[metadata$survival_months < 50] <- "Short Term"
metadata$survivor <- factor(metadata$survivor, levels=c("Short Term", "Long Term"))
# Load aa table
load(file = "../data/processed/aa_table.RData")
load(file = "../data/processed/study_table.RData")
study_table <- merge(study_table, metadata %>% select(sample_name, group_label), by.x = "repertoire_id", by.y = "sample_name")
study_table <- study_table[is.finite(study_table$junction_aa_length), ]
# Declaring sample sets for later use
NoNACT.IDs <- study_table %>% filter(group_label == "No NACT") %>%
pull(repertoire_id) %>% unique()
ShortNACT.IDs <- study_table %>% filter(group_label == "Short Interval") %>%
pull(repertoire_id) %>% unique()
LongNACT.IDs <- study_table %>% filter(group_label == "Long Interval") %>%
pull(repertoire_id) %>% unique()
ShortSurvivor.IDs <- metadata %>% filter(survivor == "Short Term") %>%
pull(sample_name)
LongSurvivor.IDs <- metadata %>% filter(survivor == "Long Term") %>%
pull(sample_name)
# For any given sample ID, this function returns any cancer associated clusters
getCancerClusters <- function(name) {
clusters <- read.csv(paste0("data/processed/cancer_clusters/", name, ".csv"))
if ("cluster" %in% names(clusters)) {
return(clusters %>% pull(cluster))
} else {
return(vector())
}
}
# For any given sample ID and set of clusters, this function returns a table
# with the number of TCRs per cluster
getNumTCRsFromCluster <- function(name, clusters) {
TCRs <- read.csv(paste0("data/processed/clustcr_labels/", name, ".csv"))
mergedAA <- as_tibble(aa_table) %>% filter(repertoire_id == name) %>%
merge(TCRs, by = "junction_aa") %>% filter(cluster %in% clusters)
table <- mergedAA %>% group_by(cluster) %>% summarize(n = sum(duplicate_count)) %>%
arrange(-n)
return(table)
}
# This function calculates a CDF for a given sample
getCDF <- function(name) {
TCRs <- read.csv(paste0("data/processed/clustcr_labels/", name, ".csv"))
mergedAA <- as_tibble(aa_table) %>% filter(repertoire_id == name) %>% merge(TCRs)
table <- mergedAA %>% group_by(cluster) %>% summarize(n = sum(duplicate_count)) %>%
arrange(-n)
return(ecdf(table$n))
}
# This function returns the TCRs in each cluster for a given sample
getTCRsPerCluster <- function(name) {
TCRs <- read.csv(paste0("data/processed/clustcr_labels/", name, ".csv"))
mergedAA <- as_tibble(aa_table) %>% filter(repertoire_id == name) %>% merge(TCRs)
table <- mergedAA %>% group_by(cluster) %>% summarize(n = sum(duplicate_count)) %>%
arrange(-n)
return(table$n)
}
countClusters <- function(name) {
TCRs <- read.csv(paste0("data/processed/clustcr_labels/", name, ".csv"))
return(length(unique(TCRs$cluster)))
}
metadata$clusters <- lapply(sample_names, countClusters) %>% unlist
sample_names <- metadata$sample_name
countClusters <- function(name) {
TCRs <- read.csv(paste0("data/processed/clustcr_labels/", name, ".csv"))
return(length(unique(TCRs$cluster)))
}
metadata$clusters <- lapply(sample_names, countClusters) %>% unlist
##### Analysis from 4/23 #####
setwd("~/Documents/GitHub/20.440-TCR-Analysis/")
metadata$clusters <- lapply(sample_names, countClusters) %>% unlist
countCancerClusters <- function(name) {
TCRs <- read.csv(paste0("data/processed/cancer_clusters/", name, ".csv"))
return(length(unique(TCRs$cluster)))
}
metadata$cancerclusters <- lapply(sample_names, countCancerClusters) %>% unlist
metadata$TCRsPerCluster <- lapply(sample_names, getTCRsPerCluster) %>% lapply(median) %>% unlist
# This function calculates the proportion of the repertoire that is cancer associated
calculatePropCancer <- function(name) {
clusters <- read.csv(paste0("data/processed/cancer_clusters/", name, ".csv"))
cancerClusters <- vector()
if ("cluster" %in% names(clusters)) {
cancerClusters <- clusters %>% pull(cluster)
}
TCRs <- read.csv(paste0("data/processed/clustcr_labels/", name, ".csv"))
mergedAA <- as_tibble(aa_table) %>% filter(repertoire_id == name) %>%
merge(TCRs, by = "junction_aa") %>% filter(cluster %in% cancerClusters)
countCancerTCRs <- mergedAA %>% group_by(cluster) %>% summarize(n = sum(duplicate_count)) %>%
pull(n) %>% sum()
total <- as_tibble(aa_table) %>% filter(repertoire_id == name) %>% pull(duplicate_count) %>% sum
return(countCancerTCRs / total)
}
metadata$propCancer <- lapply(sample_names, calculatePropCancer) %>% unlist
calculateCountCancer <- function(name) {
clusters <- read.csv(paste0("data/processed/cancer_clusters/", name, ".csv"))
cancerClusters <- vector()
if ("cluster" %in% names(clusters)) {
cancerClusters <- clusters %>% pull(cluster)
}
TCRs <- read.csv(paste0("data/processed/clustcr_labels/", name, ".csv"))
mergedAA <- as_tibble(aa_table) %>% filter(repertoire_id == name) %>%
merge(TCRs, by = "junction_aa") %>% filter(cluster %in% cancerClusters)
countCancerTCRs <- mergedAA %>% group_by(cluster) %>% summarize(n = sum(duplicate_count)) %>%
pull(n) %>% sum()
return(countCancerTCRs)
}
metadata$CancerTCRs <- lapply(sample_names, calculateCountCancer) %>% unlist
calculateClusterSizeCancer <- function(name) {
clusters <- read.csv(paste0("data/processed/cancer_clusters/", name, ".csv"))
cancerClusters <- vector()
if ("cluster" %in% names(clusters)) {
cancerClusters <- clusters %>% pull(cluster)
}
TCRs <- read.csv(paste0("data/processed/clustcr_labels/", name, ".csv"))
mergedAA <- as_tibble(aa_table) %>% filter(repertoire_id == name) %>%
merge(TCRs, by = "junction_aa") %>% filter(cluster %in% cancerClusters)
countCancerTCRs <- mergedAA %>% group_by(cluster) %>% summarize(n = sum(duplicate_count)) %>%
pull(n) %>% median()
return(countCancerTCRs)
}
metadata$cancerTCRsPerCluster <- lapply(sample_names, calculateClusterSizeCancer) %>% unlist
view(metadata)
# Create jitterplot with mean overlay and statistical significance
ggplot(metadata, aes(x = survivor, y = CancerTCRs, color = survivor)) +
geom_boxplot(width = 0.2) +
geom_jitter(width = 0.2, height = 0, alpha = 0.8) +
scale_color_manual(values = c("#C1E1C5", "#FF9F80")) +
labs(x = "", y = "Unique Amino Acid Sequences") +
theme_classic() +
theme(legend.position = "none") +
geom_signif(comparisons = list(c("Short Term", "Long Term")),
#c("Short Interval", "Long Interval"),
#c("No NACT", "Long Interval")),
map_signif_level = TRUE, color = "black")
# Create jitterplot with mean overlay and statistical significance
ggplot(metadata, aes(x = survivor, y = propCancer, color = survivor)) +
geom_boxplot(width = 0.2) +
geom_jitter(width = 0.2, height = 0, alpha = 0.8) +
scale_color_manual(values = c("#C1E1C5", "#FF9F80")) +
labs(x = "", y = "Unique Amino Acid Sequences") +
theme_classic() +
theme(legend.position = "none") +
geom_signif(comparisons = list(c("Short Term", "Long Term")),
#c("Short Interval", "Long Interval"),
#c("No NACT", "Long Interval")),
map_signif_level = TRUE, color = "black")
# Create jitterplot with mean overlay and statistical significance
ggplot(metadata, aes(x = survivor, y = cancerClusters, color = survivor)) +
geom_boxplot(width = 0.2) +
geom_jitter(width = 0.2, height = 0, alpha = 0.8) +
scale_color_manual(values = c("#C1E1C5", "#FF9F80")) +
labs(x = "", y = "Unique Amino Acid Sequences") +
theme_classic() +
theme(legend.position = "none") +
geom_signif(comparisons = list(c("Short Term", "Long Term")),
#c("Short Interval", "Long Interval"),
#c("No NACT", "Long Interval")),
map_signif_level = TRUE, color = "black")
# Create jitterplot with mean overlay and statistical significance
ggplot(test_plot, aes(x = stringent, y = Distinct_IDs, color = stringent)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.8) +
geom_boxplot(width = 0.2) +
scale_color_manual(values = c("#9AC9E3", "#EFC3E6")) +
labs(x = "", y = "Patient Repertoires Per Cluster") +
theme_classic() +
theme(legend.position = "none") +
scale_x_discrete(labels = c("Broadly Expressed", "Cancer Specific")) +
geom_signif(comparisons = list(c("Broadly Expressed", "Cancer Specific")),
#c("Short Interval", "Long Interval"),
#c("No NACT", "Long Interval")),
map_signif_level = TRUE, color = "black") +
scale_y_log10()
# Create jitterplot with mean overlay and statistical significance
ggplot(metadata, aes(x = survivor, y = cancerclusters, color = survivor)) +
geom_boxplot(width = 0.2) +
geom_jitter(width = 0.2, height = 0, alpha = 0.8) +
scale_color_manual(values = c("#C1E1C5", "#FF9F80")) +
labs(x = "", y = "Unique Amino Acid Sequences") +
theme_classic() +
theme(legend.position = "none") +
geom_signif(comparisons = list(c("Short Term", "Long Term")),
#c("Short Interval", "Long Interval"),
#c("No NACT", "Long Interval")),
map_signif_level = TRUE, color = "black")
# Create jitterplot with mean overlay and statistical significance
ggplot(metadata, aes(x = survivor, y = clusters, color = survivor)) +
geom_boxplot(width = 0.2) +
geom_jitter(width = 0.2, height = 0, alpha = 0.8) +
scale_color_manual(values = c("#C1E1C5", "#FF9F80")) +
labs(x = "", y = "Unique Amino Acid Sequences") +
theme_classic() +
theme(legend.position = "none") +
geom_signif(comparisons = list(c("Short Term", "Long Term")),
#c("Short Interval", "Long Interval"),
#c("No NACT", "Long Interval")),
map_signif_level = TRUE, color = "black")
# Create jitterplot with mean overlay and statistical significance
ggplot(metadata, aes(x = survivor, y = cancerTCRsPerCluster, color = survivor)) +
geom_boxplot(width = 0.2) +
geom_jitter(width = 0.2, height = 0, alpha = 0.8) +
scale_color_manual(values = c("#C1E1C5", "#FF9F80")) +
labs(x = "", y = "Unique Amino Acid Sequences") +
theme_classic() +
theme(legend.position = "none") +
geom_signif(comparisons = list(c("Short Term", "Long Term")),
#c("Short Interval", "Long Interval"),
#c("No NACT", "Long Interval")),
map_signif_level = TRUE, color = "black")
metadata %>% select(c(survival_months, propCancer, TCRsPerCluster, cancerclusters, CancerTCRs, cancerTCRsPerCluster))
metadata %>% select(c(survival_months, propCancer, TCRsPerCluster, cancerclusters, CancerTCRs, cancerTCRsPerCluster)) %>% view
plot(survival_months, cancerTCRs)
ggplot(data = metadata, x = survival_months, y=cancerTCRs)
ggplot(data = metadata, aes(x = survival_months, y=cancerTCRs))
ggplot(data = metadata, aes(x = survival_months, y=CancerTCRs))
ggplot(data = metadata, aes(x = survival_months, y=CancerTCRs)) + geom_point()
ggplot(data = metadata, aes(x = survival_months, y=propCancer)) + geom_point()
ggplot(data = metadata, aes(x = survival_months, y=cancerclusters)) + geom_point()
test_plot
networkMap
cluster_mat
df
view(networkMap)
specificCluseters
specificClusters
allSpecificClusters
stringentCancerTCRs
stringentCancerTCRs %>% view
view(metadata)
# Create jitterplot with mean overlay and statistical significance
ggplot(metadata, aes(x = survivor, y = age, color = survivor)) +
geom_boxplot(width = 0.2) +
geom_jitter(width = 0.2, height = 0, alpha = 0.8) +
scale_color_manual(values = c("#C1E1C5", "#FF9F80")) +
labs(x = "", y = "Unique Amino Acid Sequences") +
theme_classic() +
theme(legend.position = "none") +
geom_signif(comparisons = list(c("Short Term", "Long Term")),
#c("Short Interval", "Long Interval"),
#c("No NACT", "Long Interval")),
map_signif_level = TRUE, color = "black")
# Create jitterplot with mean overlay and statistical significance
ggplot(metadata, aes(x = survivor, y = age, color = survivor)) +
geom_boxplot(width = 0.2) +
geom_jitter(width = 0.2, height = 0, alpha = 0.8) +
scale_color_manual(values = c("#C1E1C5", "#FF9F80")) +
labs(x = "", y = "Age (Years)") +
theme_classic() +
theme(legend.position = "none") +
geom_signif(comparisons = list(c("Short Term", "Long Term")),
#c("Short Interval", "Long Interval"),
#c("No NACT", "Long Interval")),
map_signif_level = TRUE, color = "black")
# Create jitterplot with mean overlay and statistical significance
ggplot(metadata, aes(x = survivor, y = sex, color = survivor)) +
geom_boxplot(width = 0.2) +
geom_jitter(width = 0.2, height = 0, alpha = 0.8) +
scale_color_manual(values = c("#C1E1C5", "#FF9F80")) +
labs(x = "", y = "Age (Years)") +
theme_classic() +
theme(legend.position = "none") +
geom_signif(comparisons = list(c("Short Term", "Long Term")),
#c("Short Interval", "Long Interval"),
#c("No NACT", "Long Interval")),
map_signif_level = TRUE, color = "black")
# Create jitterplot with mean overlay and statistical significance
ggplot(metadata, aes(x = survivor, y = sample_clonality, color = survivor)) +
geom_boxplot(width = 0.2) +
geom_jitter(width = 0.2, height = 0, alpha = 0.8) +
scale_color_manual(values = c("#C1E1C5", "#FF9F80")) +
labs(x = "", y = "Age (Years)") +
theme_classic() +
theme(legend.position = "none") +
geom_signif(comparisons = list(c("Short Term", "Long Term")),
#c("Short Interval", "Long Interval"),
#c("No NACT", "Long Interval")),
map_signif_level = TRUE, color = "black")
# Create jitterplot with mean overlay and statistical significance
ggplot(metadata, aes(x = survivor, y = sample_entropy, color = survivor)) +
geom_boxplot(width = 0.2) +
geom_jitter(width = 0.2, height = 0, alpha = 0.8) +
scale_color_manual(values = c("#C1E1C5", "#FF9F80")) +
labs(x = "", y = "Age (Years)") +
theme_classic() +
theme(legend.position = "none") +
geom_signif(comparisons = list(c("Short Term", "Long Term")),
#c("Short Interval", "Long Interval"),
#c("No NACT", "Long Interval")),
map_signif_level = TRUE, color = "black")
# Create jitterplot with mean overlay and statistical significance
ggplot(metadata, aes(x = survivor, y = aa_gini, color = survivor)) +
geom_boxplot(width = 0.2) +
geom_jitter(width = 0.2, height = 0, alpha = 0.8) +
scale_color_manual(values = c("#C1E1C5", "#FF9F80")) +
labs(x = "", y = "Age (Years)") +
theme_classic() +
theme(legend.position = "none") +
geom_signif(comparisons = list(c("Short Term", "Long Term")),
#c("Short Interval", "Long Interval"),
#c("No NACT", "Long Interval")),
map_signif_level = TRUE, color = "black")
# Create jitterplot with mean overlay and statistical significance
ggplot(metadata, aes(x = survivor, y = aa_richness, color = survivor)) +
geom_boxplot(width = 0.2) +
geom_jitter(width = 0.2, height = 0, alpha = 0.8) +
scale_color_manual(values = c("#C1E1C5", "#FF9F80")) +
labs(x = "", y = "Age (Years)") +
theme_classic() +
theme(legend.position = "none") +
geom_signif(comparisons = list(c("Short Term", "Long Term")),
#c("Short Interval", "Long Interval"),
#c("No NACT", "Long Interval")),
map_signif_level = TRUE, color = "black")
# Create jitterplot with mean overlay and statistical significance
ggplot(metadata, aes(x = survivor, y = clusters, color = survivor)) +
geom_boxplot(width = 0.2) +
geom_jitter(width = 0.2, height = 0, alpha = 0.8) +
scale_color_manual(values = c("#C1E1C5", "#FF9F80")) +
labs(x = "", y = "Age (Years)") +
theme_classic() +
theme(legend.position = "none") +
geom_signif(comparisons = list(c("Short Term", "Long Term")),
#c("Short Interval", "Long Interval"),
#c("No NACT", "Long Interval")),
map_signif_level = TRUE, color = "black")
# Create jitterplot with mean overlay and statistical significance
ggplot(metadata, aes(x = survivor, y = cancerTCRs, color = survivor)) +
geom_boxplot(width = 0.2) +
geom_jitter(width = 0.2, height = 0, alpha = 0.8) +
scale_color_manual(values = c("#C1E1C5", "#FF9F80")) +
labs(x = "", y = "Age (Years)") +
theme_classic() +
theme(legend.position = "none") +
geom_signif(comparisons = list(c("Short Term", "Long Term")),
#c("Short Interval", "Long Interval"),
#c("No NACT", "Long Interval")),
map_signif_level = TRUE, color = "black")
# Create jitterplot with mean overlay and statistical significance
ggplot(metadata, aes(x = survivor, y = CancerTCRs, color = survivor)) +
geom_boxplot(width = 0.2) +
geom_jitter(width = 0.2, height = 0, alpha = 0.8) +
scale_color_manual(values = c("#C1E1C5", "#FF9F80")) +
labs(x = "", y = "Age (Years)") +
theme_classic() +
theme(legend.position = "none") +
geom_signif(comparisons = list(c("Short Term", "Long Term")),
#c("Short Interval", "Long Interval"),
#c("No NACT", "Long Interval")),
map_signif_level = TRUE, color = "black")
# Create jitterplot with mean overlay and statistical significance
ggplot(metadata, aes(x = survivor, y = propCancer, color = survivor)) +
geom_boxplot(width = 0.2) +
geom_jitter(width = 0.2, height = 0, alpha = 0.8) +
scale_color_manual(values = c("#C1E1C5", "#FF9F80")) +
labs(x = "", y = "Age (Years)") +
theme_classic() +
theme(legend.position = "none") +
geom_signif(comparisons = list(c("Short Term", "Long Term")),
#c("Short Interval", "Long Interval"),
#c("No NACT", "Long Interval")),
map_signif_level = TRUE, color = "black")
# Create jitterplot with mean overlay and statistical significance
ggplot(metadata, aes(x = survivor, y = age, color = survivor)) +
geom_boxplot(width = 0.2) +
geom_jitter(width = 0.2, height = 0, alpha = 0.8) +
scale_color_manual(values = c("#C1E1C5", "#FF9F80")) +
labs(x = "", y = "Age (Years)") +
theme_classic() +
theme(legend.position = "none") +
geom_signif(comparisons = list(c("Short Term", "Long Term")),
#c("Short Interval", "Long Interval"),
#c("No NACT", "Long Interval")),
map_signif_level = TRUE, color = "black")
# Create jitterplot with mean overlay and statistical significance
ggplot(metadata, aes(x = survivor, y = propCancer, color = survivor)) +
geom_boxplot(width = 0.2) +
geom_jitter(width = 0.2, height = 0, alpha = 0.8) +
scale_color_manual(values = c("#C1E1C5", "#FF9F80")) +
labs(x = "", y = "Proportion of Cancer Associated TCRs") +
theme_classic() +
theme(legend.position = "none") +
geom_signif(comparisons = list(c("Short Term", "Long Term")),
#c("Short Interval", "Long Interval"),
#c("No NACT", "Long Interval")),
map_signif_level = TRUE, color = "black")
# Create jitterplot with mean overlay and statistical significance
ggplot(metadata, aes(x = survivor, y = propCancer, color = survivor)) +
geom_boxplot(width = 0.2) +
geom_jitter(width = 0.2, height = 0, alpha = 0.8) +
scale_color_manual(values = c("#C1E1C5", "#FF9F80")) +
labs(x = "", y = "Proportion Cancer Associated TCRs") +
theme_classic() +
theme(legend.position = "none") +
geom_signif(comparisons = list(c("Short Term", "Long Term")),
#c("Short Interval", "Long Interval"),
#c("No NACT", "Long Interval")),
map_signif_level = TRUE, color = "black")
survivalNames <- metadata$survival_months
survivalNames[rownames(my_matrix) %in% ShortSurvivor.IDs] <- "Short Term"
survivalNames[rownames(my_matrix) %in% LongSurvivor.IDs] <- "Long Term"
net %v% "survival" = survivalNames
networkMap$colorS <- "#FF9F80"
networkMap$colorS[survivalNames == "Long Term"] <- "#C1E1C5"
# Plot network
ggnet2(net, color = "colorS", size = "degree", alpha = 0.4,
edge.color = "grey", edge.size = "weight", mode = 'kamadakawai') +
guides(size = FALSE)
net %v% "colorS" = networkMap$colorS
# Plot network
ggnet2(net, color = "colorS", size = "degree", alpha = 0.4,
edge.color = "grey", edge.size = "weight", mode = 'kamadakawai') +
guides(size = FALSE)
# Create jitterplot with mean overlay and statistical significance
ggplot(metadata, aes(x = survivor, y = propCancer, color = survivor)) +
geom_boxplot(width = 0.2) +
geom_jitter(width = 0.2, height = 0, alpha = 0.8) +
scale_color_manual(values = c("#C1E1C5", "#FF9F80")) +
labs(x = "", y = "Proportion Cancer Associated TCRs") +
theme_classic() +
theme(legend.position = "none") +
geom_signif(comparisons = list(c("Short Term", "Long Term")),
#c("Short Interval", "Long Interval"),
#c("No NACT", "Long Interval")),
map_signif_level = TRUE, color = "black")
# Create jitterplot with mean overlay and statistical significance
ggplot(metadata, aes(x = survivor, y = total_templates, color = survivor)) +
geom_boxplot(width = 0.2) +
geom_jitter(width = 0.2, height = 0, alpha = 0.8) +
scale_color_manual(values = c("#C1E1C5", "#FF9F80")) +
labs(x = "", y = "Proportion Cancer Associated TCRs") +
theme_classic() +
theme(legend.position = "none") +
geom_signif(comparisons = list(c("Short Term", "Long Term")),
#c("Short Interval", "Long Interval"),
#c("No NACT", "Long Interval")),
map_signif_level = TRUE, color = "black")
degree(net)[survivalNames == "Long Term"] %>% mean() /2
degree(net)[survivalNames == "Short Term"] %>% mean() /2
cluster_mat %>% rowSums()
rowSums(cluster_mat)[survivalNames == "Short Term"]
rowSums(cluster_mat)[survivalNames == "Short Term"] %>% mean
rowSums(cluster_mat)[survivalNames == "Long Term"] %>% mean
