library(tidyverse)
library(Seurat)
library(ggplot2)
library(gridExtra)
setwd("~/Desktop/Will Hwang Lab")
# Read in data
data <- readRDS("Data/Hwang_6K_noGeneQC_seurat_object_processed.rds")
S1 <- read.csv("Data/S1_metadata.csv")
S2 <- read.csv("Data/S2_metadata_original.csv")
annotations <- rbind(S1, S2)
# Merge annotations into Seurat object metadata
data@meta.data <- merge(data@meta.data, annotations, by.x = "row.names", by.y = "cell_ID")
data@meta.data$FOV_ID <- paste(data@meta.data$patientID, data@meta.data$fov, sep = "_")
data@meta.data$FOV_ID <- factor(data@meta.data$FOV_ID)
# Check the distribution of cells per FOV
counts <- data@meta.data %>%
group_by(FOV_ID) %>%
summarise(count = n())
hist(counts$count, breaks = 30)
# Separate data by Group
PNI_samples <- subset(data@meta.data, status.x == "PNI+")
nonPNI_samples <- subset(data@meta.data, status.x == "PNI-")
PNI_samples %>% group_by(FOV_ID, RNA_nbclust_clusters.x) %>% summarize(total_count=n()) %>%
filter(RNA_nbclust_clusters.x == "Nerve") %>% ungroup() %>% arrange(-total_count) %>%
pull(FOV_ID) -> levels
my_colors <- c(Malignancy = "red", Macrophage = "green", CAF = "black", Nerve = "blue", T ="yellow")
p1 <- ggplot(data = PNI_samples, aes(x = factor(FOV_ID, level = levels),
fill = RNA_nbclust_clusters.x)) +
geom_bar() +
facet_grid(~ status.y) +
xlab("Sample") +
ylab("Cell Type Count") +
ylim(0, 3200) +
ggtitle("Cell Type Composition by Sample") +
scale_fill_manual(values = my_colors) +
theme(axis.text.x = element_text(angle = 45, size = 5, hjust = 1, vjust = 1)) +
theme(legend.position = "none") +
theme(panel.background = element_blank(),
plot.background = element_blank())
p2 <- ggplot(data = nonPNI_samples, aes(x = FOV_ID, fill = RNA_nbclust_clusters.x)) +
geom_bar() +
facet_grid(~ status.y) +
xlab("") +
ylab("") +
ylim(0, 3200) +
ggtitle("") +
labs(fill = "Cell Type") +
scale_fill_manual(values = my_colors) +
theme(axis.text.x = element_text(angle = 45, size = 5, hjust = 1, vjust = 1)) +
theme(legend.text = element_text(size = 8)) +
theme(panel.background = element_blank(),
plot.background = element_blank())
proportionsPNI <- PNI_samples %>%
group_by(FOV_ID, RNA_nbclust_clusters.x) %>%
summarize(Count = n()) %>%
group_by(FOV_ID) %>%
mutate(Proportion = Count / sum(Count)) %>%
ungroup()
p3 <- ggplot(proportionsPNI, aes(x = factor(FOV_ID, level = levels), y = Proportion, fill = RNA_nbclust_clusters.x)) +
geom_bar(position = "fill", stat = "identity") +
xlab("Sample") +
ylab("Proportion") +
ylim(0,1) +
scale_fill_manual(values = my_colors) +
theme(axis.text.x = element_text(angle = 45, size = 5, hjust = 1, vjust = 1)) +
theme(legend.position = "none") +
theme(panel.background = element_blank(),
plot.background = element_blank())
proportionsnonPNI <- nonPNI_samples %>%
group_by(FOV_ID, RNA_nbclust_clusters.x) %>%
summarize(Count = n()) %>%
group_by(FOV_ID) %>%
mutate(Proportion = Count / sum(Count)) %>%
ungroup()
p4 <- ggplot(proportionsnonPNI, aes(x = FOV_ID, y = Proportion, fill = RNA_nbclust_clusters.x)) +
geom_bar(position = "fill", stat = "identity") +
xlab("") +
ylab("") +
ylim(0,1) +
scale_fill_manual(values = my_colors) +
theme(axis.text.x = element_text(angle = 45, size = 5, hjust = 1, vjust = 1)) +
theme(legend.position = "none") +
theme(panel.background = element_blank(),
plot.background = element_blank())
# Create subplots for each group
grid.arrange(
p1, p2, p3, p4,
ncol = 2
)
df <- data@meta.data %>%
group_by(FOV_ID, RNA_nbclust_clusters.x, status.x) %>%
summarize(total_count=n()) %>% ungroup()
# Calculate p-value for each CellType
p_values <- df %>%
group_by(RNA_nbclust_clusters.x) %>%
summarize(p_value = t.test(total_count ~ status.x)$p.value)
p_values <- left_join(p_values, df[, c("RNA_nbclust_clusters.x", "status.x")],
by = "RNA_nbclust_clusters.x")
ggplot(df, aes(x = RNA_nbclust_clusters.x, y = total_count, fill = status.x)) +
geom_boxplot() +
scale_y_log10() +
xlab("") +
ylab("Total Count") +
ylim(0,1600) +
labs(fill = "PNI Status") +
ggtitle("Nerve Total Cell Count by PNI Status Across FOVs") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, size = 8, hjust = 1, vjust = 1)) +
geom_text(data = p_values, aes(x = RNA_nbclust_clusters.x, y = 1500,
label = ifelse(p_value < 0.05, "*", "")),
size = 5, hjust = 0.5, vjust = -1)
proportions <- data@meta.data %>%
group_by(FOV_ID, RNA_nbclust_clusters.x, status.x) %>%
summarize(Count = n()) %>%
group_by(FOV_ID) %>%
mutate(Proportion = Count / sum(Count)) %>%
ungroup()
proportions
# Calculate p-value for each CellType
p_values <- proportions %>%
group_by(RNA_nbclust_clusters.x) %>%
summarize(p_value = t.test(Proportion ~ status.x)$p.value)
p_values <- left_join(p_values, proportions[, c("RNA_nbclust_clusters.x", "status.x")],
by = "RNA_nbclust_clusters.x")
p5 <- ggplot(df, aes(x = RNA_nbclust_clusters.x, y = total_count, fill = status.x)) +
geom_boxplot() +
xlab("") +
ylab("Total Count") +
ylim(0,1600) +
labs(fill = "PNI Status") +
ggtitle("Cell Enrichment in PNI- vs PNI+ FOVs") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, size = 8, hjust = 1, vjust = 1)) +
geom_text(data = p_values, aes(x = RNA_nbclust_clusters.x, y = 1500,
label = ifelse(p_value < 0.05, "*", "")),
size = 5, hjust = 0.5, vjust = -1)
df <- data@meta.data %>%
group_by(FOV_ID, RNA_nbclust_clusters.x, status.x) %>%
summarize(total_count=n()) %>% ungroup()
# Calculate p-value for each CellType
p_values <- df %>%
group_by(RNA_nbclust_clusters.x) %>%
summarize(p_value = t.test(total_count ~ status.x)$p.value)
p_values <- left_join(p_values, df[, c("RNA_nbclust_clusters.x", "status.x")],
by = "RNA_nbclust_clusters.x")
p5 <- ggplot(df, aes(x = RNA_nbclust_clusters.x, y = total_count, fill = status.x)) +
geom_boxplot() +
xlab("") +
ylab("Total Count") +
ylim(0,1600) +
labs(fill = "PNI Status") +
ggtitle("Cell Enrichment in PNI- vs PNI+ FOVs") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, size = 8, hjust = 1, vjust = 1)) +
geom_text(data = p_values, aes(x = RNA_nbclust_clusters.x, y = 1500,
label = ifelse(p_value < 0.05, "*", "")),
size = 5, hjust = 0.5, vjust = -1)
proportions <- data@meta.data %>%
group_by(FOV_ID, RNA_nbclust_clusters.x, status.x) %>%
summarize(Count = n()) %>%
group_by(FOV_ID) %>%
mutate(Proportion = Count / sum(Count)) %>%
ungroup()
# Calculate p-value for each CellType
p_values <- proportions %>%
group_by(RNA_nbclust_clusters.x) %>%
summarize(p_value = t.test(Proportion ~ status.x)$p.value)
p_values <- left_join(p_values, proportions[, c("RNA_nbclust_clusters.x", "status.x")],
by = "RNA_nbclust_clusters.x")
p6 <- ggplot(proportions, aes(x = RNA_nbclust_clusters.x, y = Proportion, fill = status.x)) +
geom_boxplot() +
xlab("") +
ylab("Proportion") +
ylim(0,1) +
labs(fill = "PNI Status") +
ggtitle("") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, size = 8, hjust = 1, vjust = 1)) +
geom_text(data = p_values, aes(x = RNA_nbclust_clusters.x, y = 0.8,
label = ifelse(p_value < 0.05, "*", "")),
size = 5, hjust = 0.5, vjust = -1)
# Create subplots for each group
grid.arrange(
p5, p6,
ncol = 1
)
p5
p5 <- ggplot(df, aes(x = RNA_nbclust_clusters.x, y = total_count, fill = status.x)) +
geom_boxplot() +
xlab("") +
ylab("Total Count") +
ylim(0,1600) +
labs(fill = "PNI Status") +
ggtitle("Cell Enrichment in PNI- vs PNI+ FOVs") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, size = 8, hjust = 1, vjust = 1)) +
geom_text(data = p_values, aes(x = RNA_nbclust_clusters.x, y = 1400,
label = ifelse(p_value < 0.05, "*", "")),
size = 5, hjust = 0.5, vjust = -1)
## Plot change for each cell type #####
df <- data@meta.data %>%
group_by(FOV_ID, RNA_nbclust_clusters.x, status.x) %>%
summarize(total_count=n()) %>% ungroup()
# Calculate p-value for each CellType
p_values <- df %>%
group_by(RNA_nbclust_clusters.x) %>%
summarize(p_value = t.test(total_count ~ status.x)$p.value)
p_values <- left_join(p_values, df[, c("RNA_nbclust_clusters.x", "status.x")],
by = "RNA_nbclust_clusters.x")
p5 <- ggplot(df, aes(x = RNA_nbclust_clusters.x, y = total_count, fill = status.x)) +
geom_boxplot() +
xlab("") +
ylab("Total Count") +
ylim(0,1600) +
labs(fill = "PNI Status") +
ggtitle("Cell Enrichment in PNI- vs PNI+ FOVs") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, size = 8, hjust = 1, vjust = 1)) +
geom_text(data = p_values, aes(x = RNA_nbclust_clusters.x, y = 1400,
label = ifelse(p_value < 0.05, "*", "")),
size = 5, hjust = 0.5, vjust = -1)
proportions <- data@meta.data %>%
group_by(FOV_ID, RNA_nbclust_clusters.x, status.x) %>%
summarize(Count = n()) %>%
group_by(FOV_ID) %>%
mutate(Proportion = Count / sum(Count)) %>%
ungroup()
# Calculate p-value for each CellType
p_values <- proportions %>%
group_by(RNA_nbclust_clusters.x) %>%
summarize(p_value = t.test(Proportion ~ status.x)$p.value)
p_values <- left_join(p_values, proportions[, c("RNA_nbclust_clusters.x", "status.x")],
by = "RNA_nbclust_clusters.x")
p6 <- ggplot(proportions, aes(x = RNA_nbclust_clusters.x, y = Proportion, fill = status.x)) +
geom_boxplot() +
xlab("") +
ylab("Proportion") +
ylim(0,1) +
labs(fill = "PNI Status") +
ggtitle("") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, size = 8, hjust = 1, vjust = 1)) +
geom_text(data = p_values, aes(x = RNA_nbclust_clusters.x, y = 0.8,
label = ifelse(p_value < 0.05, "*", "")),
size = 5, hjust = 0.5, vjust = -1)
# Create subplots for each group
grid.arrange(
p5, p6,
ncol = 1
)
data@meta.data
# Function to calculate the distance to the nearest nerve cell
distance_to_nearest_nerve <- function(x, y, nerve_cells) {
distances <- apply(nerve_cells[, c("x_slide_mm", "y_slide_mm")], 1, function(nerve_cell) {
euclidean_distance(x, y, nerve_cell["x_slide_mm"], nerve_cell["y_slide_mm"])
})
return(min(distances))
}
# Function to calculate the Euclidean distance between two points
euclidean_distance <- function(x1, y1, x2, y2) {
return(sqrt((x1 - x2)^2 + (y1 - y2)^2))
}
tissue_data <- data@meta.data
# Prepare your data
nerve_cells <- tissue_data[tissue_data$RNA_nbclust_clusters.x == "Nerve",]
# Function to calculate the Euclidean distance between two points
euclidean_distance <- function(x1, y1, x2, y2) {
return(sqrt((x1 - x2)^2 + (y1 - y2)^2))
}
# Function to calculate the distance to the nearest nerve cell
distance_to_nearest_nerve <- function(x, y, nerve_cells) {
distances <- apply(nerve_cells[, c("x_slide_mm", "y_slide_mm")], 1, function(nerve_cell) {
euclidean_distance(x, y, nerve_cell["x_slide_mm"], nerve_cell["y_slide_mm"])
})
return(min(distances))
}
# Calculate distances
tissue_data$distance_to_nearest_nerve <- mapply(distance_to_nearest_nerve,
tissue_data$x_slide_mm, tissue_data$y_slide_mm,
MoreArgs = list(nerve_cells = nerve_cells))
# Function to calculate the Euclidean distance between two points
euclidean_distance <- function(x1, y1, x2, y2) {
return(sqrt((x1 - x2)^2 + (y1 - y2)^2))
}
# Function to calculate the distance to the nearest nerve cell
distance_to_nearest_nerve <- function(x, y, nerve_cells) {
distances <- apply(nerve_cells[, c("x", "y")], 1, function(nerve_cell) {
euclidean_distance(x, y, nerve_cell["x"], nerve_cell["y"])
})
return(min(distances))
}
# Function to calculate distances within each array ID
calc_distances_within_array <- function(array_data) {
nerve_cells <- array_data[array_data$cell_type == "Nerve",]
array_data$distance_to_nearest_nerve <- mapply(distance_to_nearest_nerve, array_data$x, array_data$y, MoreArgs = list(nerve_cells = nerve_cells))
return(array_data)
}
# Function to calculate the Euclidean distance between two points
euclidean_distance <- function(x1, y1, x2, y2) {
return(sqrt((x1 - x2)^2 + (y1 - y2)^2))
}
# Function to calculate the distance to the nearest nerve cell
distance_to_nearest_nerve <- function(x, y, nerve_cells) {
distances <- apply(nerve_cells[, c("x_slide_mm", "y_slide_mm")], 1, function(nerve_cell) {
euclidean_distance(x, y, nerve_cell["x_slide_mm"], nerve_cell["y_slide_mm"])
})
return(min(distances))
}
# Function to calculate distances within each array ID
calc_distances_within_array <- function(array_data) {
nerve_cells <- array_data[array_data$RNA_nbclust_clusters.x == "Nerve",]
array_data$distance_to_nearest_nerve <- mapply(distance_to_nearest_nerve,
array_data$x_slide_mm, array_data$y_slide_mm,
MoreArgs = list(nerve_cells = nerve_cells))
return(array_data)
}
tissue_data <- data@meta.data
# Function to calculate the Euclidean distance between two points
euclidean_distance <- function(x1, y1, x2, y2) {
return(sqrt((x1 - x2)^2 + (y1 - y2)^2))
}
# Function to calculate the distance to the nearest nerve cell
distance_to_nearest_nerve <- function(x, y, nerve_cells) {
distances <- apply(nerve_cells[, c("x_slide_mm", "y_slide_mm")], 1, function(nerve_cell) {
euclidean_distance(x, y, nerve_cell["x_slide_mm"], nerve_cell["y_slide_mm"])
})
return(min(distances))
}
# Function to calculate distances within each array ID
calc_distances_within_array <- function(array_data) {
nerve_cells <- array_data[array_data$RNA_nbclust_clusters.x == "Nerve",]
array_data$distance_to_nearest_nerve <- mapply(distance_to_nearest_nerve,
array_data$x_slide_mm, array_data$y_slide_mm,
MoreArgs = list(nerve_cells = nerve_cells))
return(array_data)
}
# Calculate distances separately for each array ID
tissue_data <- tissue_data %>%
group_by(FOV_ID) %>%
group_modify(~calc_distances_within_array(.))
warnings()
tissue_data
colnames(tissue_data)
tissue_data$distance_to_nearest_nerve
# Compute the average distance per cell type and array ID
average_distances <- tissue_data %>%
group_by(FOV_ID, cell_type) %>%
summarise(average_distance = mean(distance_to_nearest_nerve), .groups = "drop")
# Compute the average distance per cell type and array ID
average_distances <- tissue_data %>%
group_by(FOV_ID, RNA_nbclust_clusters.x) %>%
summarise(average_distance = mean(distance_to_nearest_nerve), .groups = "drop")
print(average_distances)
# Compute the average distance per cell type and array ID
average_distances <- tissue_data %>%
group_by(FOV_ID, RNA_nbclust_clusters.x, status.x) %>%
summarise(average_distance = mean(distance_to_nearest_nerve), .groups = "drop")
print(average_distances)
# Calculate p-value for each CellType
p_values <- average_distances %>%
group_by(RNA_nbclust_clusters.x) %>%
summarize(p_value = t.test(average_distance ~ status.x)$p.value)
hist(average_distances$average_distance, breaks = 30)
p6 <- ggplot(average_distances, aes(x = RNA_nbclust_clusters.x, y = average_distance,
fill = status.x)) +
geom_boxplot() +
xlab("") +
ylab("Average Distance") +
ylim(0,1) +
labs(fill = "PNI Status") +
ggtitle("") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, size = 8, hjust = 1, vjust = 1))
p7 <- ggplot(average_distances, aes(x = RNA_nbclust_clusters.x, y = average_distance,
fill = status.x)) +
geom_boxplot() +
xlab("") +
ylab("Average Distance") +
ylim(0,1) +
labs(fill = "PNI Status") +
ggtitle("") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, size = 8, hjust = 1, vjust = 1))
p7
p7 <- ggplot(average_distances, aes(x = RNA_nbclust_clusters.x, y = average_distance,
fill = status.x)) +
geom_boxplot() +
xlab("") +
ylab("Average Distance (mm)") +
labs(fill = "PNI Status") +
ggtitle("") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, size = 8, hjust = 1, vjust = 1))
p7
data@meta.data
library(tidyverse)
library(Seurat)
library(ggplot2)
library(gridExtra)
setwd("~/Desktop/Will Hwang Lab")
# Read in data
data <- readRDS("Data/Hwang_6K_noGeneQC_seurat_object_processed.rds")
S1 <- read.csv("Data/S1_metadata.csv")
S2 <- read.csv("Data/S2_metadata_original.csv")
annotations <- rbind(S1, S2)
# Merge annotations into Seurat object metadata
data@meta.data <- merge(data@meta.data, annotations, by.x = "row.names", by.y = "cell_ID")
data@meta.data$FOV_ID <- paste(data@meta.data$patientID, data@meta.data$fov, sep = "_")
data@meta.data$FOV_ID <- factor(data@meta.data$FOV_ID)
# Function to create and save scatterplot for each ID
create_scatterplot <- function(data, id) {
plot_data <- data[data$id == id,]
# Create the scatterplot
plot <- ggplot(plot_data, aes(x = x, y = y, color = identity)) +
geom_point() +
labs(title = paste("Scatterplot for ID", id),
x = "X Coordinate",
y = "Y Coordinate") +
theme_minimal()
# Save the scatterplot as a PDF
ggsave(paste0("scatterplot_id_", id, ".pdf"), plot, width = 10, height = 8)
}
# Function to create and save scatterplot for each ID
create_scatterplot <- function(data, id) {
plot_data <- data[data$FOV_ID == id,]
# Create the scatterplot
plot <- ggplot(plot_data, aes(x = x_slide_mm, y = y_slide_mm, color = RNA_nbclust_clusters.x)) +
geom_point() +
labs(title = paste("Scatterplot for ID", id),
x = "X Coordinate",
y = "Y Coordinate") +
theme_minimal()
# Save the scatterplot as a PDF
ggsave(paste0(id, ".pdf"), plot, width = 10, height = 8)
}
# Loop through each unique ID and call the function
unique_ids <- unique(data$FOV_ID)
for (id in unique_ids[1]) {
create_scatterplot(data, id)
}
for (id in unique_ids[1]) {
create_scatterplot(data@meta.data, id)
}
slots(data)
data
data@meta.data %>% group_by(FOV_ID) %>% summarize(count = n())
data@meta.data %>% group_by(FOV_ID) %>% summarize(count = n()) %>% pull(count) %>% mean()
# Loop through each unique ID and call the function
unique_ids <- unique(data$FOV_ID)
for (id in unique_ids) {
create_scatterplot(data@meta.data, id)
}
paste0("6kFOVs/", id, ".pdf")
data@reductions
DimPlot(object = data, reduction = "approximateumap")
DimPlot(object = data, reduction = "approximateumap", assay = "RNA")
data
DimPlot(object = data, reduction = "approximateumap", arg = "RNA")
DimPlot(object = data, reduction = "approximateumap")
DefaultAssay(data) <- "RNA"
DimPlot(object = data, reduction = "approximateumap")
Idents(data) <- RNA_nbclust_clusters.x
Idents(data) <- "RNA_nbclust_clusters.x"
data@meta.data$RNA_nbclust_clusters.x %>% unique
immune <- subset(x = data, idents = c("T", "B", "Macrophage", "Neutrophil",
"Dendritic", "Dendritic (plasmacytoid)"), invert = TRUE)
data@meta.data
immune <- subset(x = data, idents = c("T", "B", "Macrophage", "Neutrophil",
"Dendritic", "Dendritic (plasmacytoid)"), invert = TRUE)
data
Assays(data)
Cells(data)
ncol(data)
nrow(data)
levels(data)
subset(data, idents = "T")
levels(data)
data
test <- CreateSeuratObject(
GetAssayData(object = data, slot = "counts"),
project = "Test",
assay = "RNA",
meta.data = data@meta.data
)
test
test@meta.data
hello <- subset(test, idents = "T")
Idents(test) <- "RNA_nbclust_clusters.x"
hello <- subset(test, idents = "T")
# Read in data
data <- readRDS("Data/Hwang_6K_noGeneQC_seurat_object_processed.rds")
data
Idents(data) <- "RNA_nbclust_clusters.x"
library(tidyverse)
library(Seurat)
library(ggplot2)
library(gridExtra)
setwd("~/Desktop/Will Hwang Lab")
# Read in data
data <- readRDS("Data/Hwang_6K_noGeneQC_seurat_object_processed.rds")
