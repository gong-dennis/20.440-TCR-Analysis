txy <- sum((X - mean(X)) * (Y - mean(Y)))
txx <- sum((X - mean(X))^2)
beta1.hat <- txy/txx
beta0.hat <- mean(Y) - beta1.hat * mean(X)
Yhat <- beta0.hat + beta1.hat * X
residuals <- Y - Yhat
(shapiro.test(residuals))
(S <- sign(residuals - median(residuals)))
N <- length(S)
N.plus <- sum(S > 0)
N.minus <- sum(S < 0)
c(N, N.plus, N.minus)
mu.R <- 1 + 2 * (N.plus * N.minus)/N
sigma.R2 <- (mu.R - 1) * (mu.R - 2)/(N - 1)
c(mu.R, sigma.R2)
(T <- S[2:N] - S[1:(N - 1)])
(R <- sum(T != 0))
(Z <- (R - mu.R)/sqrt(sigma.R2))
(2 * pnorm(abs(Z), lower.tail = FALSE))
library("lawstat")
runs.test(residuals)
library("MASS")
library("SemiPar")
data(elec.temp)
g <- lm(usage ~ temp, elec.temp)
boxcox(g, plotit = TRUE, lambda = seq(from = -2, to = 2, by = 0.1))
g <- lm(diameter ~ concentration, data = tetrahymena)
qt(0.005, 432)
library(tidyverse)
library(tidyverse)
viability <- read.csv("Predicted Vals_viability_allModels.csv")
transfection <- read.csv("Predicted Vals_transfection_allModels.csv")
hep3b_val <- read_excel("Predicted Vals.xlsx", sheet = "Hep3B")
library(readxl)
hep3b_val <- read_excel("Predicted Vals.xlsx", sheet = "Hep3B")
mac_val <- read_excel("Predicted Vals.xlsx", sheet = "Macs")
mac_val$ID
mac_val$'ID'
mac_val$'ID'
mac_val$'Predicted Values (RF)'
pred_rf_mac <- mac_val$'Predicted Values (RF)'
y_true_mac <- mac_val$'Actual Mac'
pred_rf_hep3b <- hep3b_val$'Predicted Values (RF)'
y_true_hep3b <- hep3b_val$'Actual Values'
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
e <- ggplot(mac_val, aes('Predicted Values (RF)', 'Actual Mac'))
print(e)
e <- ggplot(mac_val, aes(Predicted Values (RF), 'Actual Mac'))
e <- ggplot(mac_val, aes(`Predicted Values (RF)`, 'Actual Mac'))
print(e)
e <- ggplot(mac_val, aes(`Predicted Values (RF)`, `Actual Mac`))
print(e)
e <- ggplot(mac_val, aes(`Predicted Values (RF)`, `Actual Mac`)) +
geom_jitter()
print(e)
e <- ggplot(mac_val, aes(`Predicted Values (RF)`, `Actual Mac`)) +
geom_point()
print(e)
viability <- read.csv("Predicted Vals_viability_allModels.csv")
transfection <- read.csv("Predicted Vals_transfection_allModels.csv")
hep3b_val <- read_excel("Predicted Vals.xlsx", sheet = "Hep3B")
mac_val <- read_excel("Predicted Vals.xlsx", sheet = "Macs")
```{r}
library(tidyverse)
library(tidyverse)
library(readxl)
library(ggplot2)
viability <- read.csv("Predicted Vals_viability_allModels.csv")
transfection <- read.csv("Predicted Vals_transfection_allModels.csv")
hep3b_val <- read_excel("Predicted Vals.xlsx", sheet = "Hep3B")
```{r}
pred_rf_mac <- mac_val$'Predicted Values (RF)'
y_true_mac <- mac_val$'Actual Mac'
pred_rf_hep3b <- hep3b_val$'Predicted Values (RF)'
y_true_hep3b <- hep3b_val$'Actual Values'
e <- ggplot(mac_val, aes(`Predicted Values (RF)`, `Actual Mac`)) +
geom_point()
print(e)
library(tidyverse)
library(readxl)
library(ggplot2)
viability <- read.csv("Predicted Vals_viability_allModels.csv")
transfection <- read.csv("Predicted Vals_transfection_allModels.csv")
hep3b_val <- read_excel("Predicted Vals.xlsx", sheet = "Hep3B")
mac_val <- read_excel("Predicted Vals.xlsx", sheet = "Macs")
pred_rf_mac <- mac_val$'Predicted Transfection (%)'
y_true_mac <- mac_val$'Observed Transfection (%)'
pred_rf_hep3b <- hep3b_val$'Predicted Transfection (%)'
y_true_hep3b <- hep3b_val$'Observed Transfection (%)'
e <- ggplot(mac_val, aes(`Predicted Transfection (%)`, `Observed Transfection (%)`)) +
geom_point()
print(e)
e <- ggplot(mac_val, aes(`Predicted Transfection (%)`, `Observed Transfection (%)`)) +
geom_label(aes(label = Polymer))
print(e)
e <- ggplot(mac_val, aes(`Predicted Transfection (%)`, `Observed Transfection (%)`)) +
geom_point()
print(e)
f <- ggplot(hep3b_val, aes(`Predicted Transfection (%)`, `Observed Transfection (%)`)) +
geom_point()
print(f)
e <- ggplot(mac_val, aes(`Predicted Transfection (%)`, `Observed Transfection (%)`)) +
geom_point() +
ggtitle("Random forest predicted RAW.264 transfection")
f <- ggplot(hep3b_val, aes(`Predicted Transfection (%)`, `Observed Transfection (%)`)) +
geom_point() +
ggtitle("Random forest predicted Hep3B transfection")
print(e)
print(f)
View(transfection)
colnames(transfection)
e <- ggplot(transfection, aes(`Predicted..RF.`, `True.y`)) +
geom_point() +
ggtitle("Random forest backtesting: Transfection")
f <- ggplot(viability, aes(`Predicted..RF.`, `True.y`)) +
geom_point() +
ggtitle("Random forest backtesting: Viability")
print(e)
print(f)
e <- ggplot(transfection, aes(`True.y`, `Predicted..RF.`)) +
geom_point() +
ggtitle("Random forest backtesting: Transfection")
f <- ggplot(viability, aes(`True.y`, `Predicted..RF.`)) +
geom_point() +
ggtitle("Random forest backtesting: Viability")
print(e)
install.packages(ggpubr)
install.packages("ggpubr")
library(ggpubr)
e <- ggplot(transfection, aes(`True.y`, `Predicted..RF.`)) +
geom_point() +
ggtitle("Random forest backtesting: Transfection") +
stat_cor(method = "pearson")
f <- ggplot(viability, aes(`True.y`, `Predicted..RF.`)) +
geom_point() +
ggtitle("Random forest backtesting: Viability")+
stat_cor(method = "pearson")
print(e)
print(f)
mac_plot <- ggplot(mac_val, aes(`Predicted Transfection (%)`, `Observed Transfection (%)`)) +
geom_point() +
ggtitle("Random forest predicted RAW.264 transfection") +
stat_cor(method = "pearson")
hep3b_plot <- ggplot(hep3b_val, aes(`Predicted Transfection (%)`, `Observed Transfection (%)`)) +
geom_point() +
ggtitle("Random forest predicted Hep3B transfection") +
stat_cor(method = "pearson")
print(mac_plot)
print(hep3b_plot)
mac_plot <- ggplot(mac_val, aes(`Predicted Transfection (%)`, `Observed Transfection (%)`)) +
geom_point() +
ggtitle("Random forest predicted RAW.264 transfection") +
stat_cor(method = "pearson")+
stat_cor(method = "spearman")
print(mac_plot)
mac_plot <- ggplot(mac_val, aes(`Predicted Transfection (%)`, `Observed Transfection (%)`)) +
geom_point() +
ggtitle("Random forest predicted RAW.264 transfection") +
stat_cor(method = "pearson")
print(mac_plot)
mac_plot <- ggplot(mac_val, aes(`Predicted Transfection (%)`, `Observed Transfection (%)`)) +
geom_point() +
ggtitle("Random forest predicted RAW.264 transfection") +
stat_cor(method = "spearman")
print(mac_plot)
hep3b_plot <- ggplot(hep3b_val, aes(`Predicted Transfection (%)`, `Observed Transfection (%)`)) +
geom_point() +
ggtitle("Random forest predicted Hep3B transfection") +
stat_cor(method = "pearson")
print(hep3b_plot)
hep3b_plot <- ggplot(hep3b_val, aes(`Predicted Transfection (%)`, `Observed Transfection (%)`)) +
geom_point() +
ggtitle("Random forest predicted Hep3B transfection") +
stat_cor(method = "spearman")
print(hep3b_plot)
f <- ggplot(viability, aes(`True.y`, `Predicted..RF.`)) +
geom_point() +
ggtitle("Random forest backtesting: Viability") +
stat_cor(method = "spearman")
print(f)
e <- ggplot(transfection, aes(`True.y`, `Predicted..RF.`)) +
geom_point() +
ggtitle("Random forest backtesting: Transfection") +
stat_cor(method = "spearman")
f <- ggplot(viability, aes(`True.y`, `Predicted..RF.`)) +
geom_point() +
ggtitle("Random forest backtesting: Viability") +
stat_cor(method = "spearman")
print(e)
print(f)
f <- ggplot(viability, aes(`True.y`, `Predicted..RF.`)) +
geom_point() +
ggtitle("Random forest backtesting: Viability") +
stat_cor(method = "spearman") +
theme_classic()
print(f)
f <- ggplot(viability, aes(`True.y`, `Predicted..RF.`)) +
geom_point() +
ggtitle("Random forest backtesting: Viability") +
stat_cor(method = "spearman") +
theme_light()
print(f)
f <- ggplot(viability, aes(`True.y`, `Predicted..RF.`)) +
geom_point() +
ggtitle("Random forest backtesting: Viability") +
stat_cor(method = "spearman")
print(f)
f <- ggplot(viability, aes(`True.y`, `Predicted..RF.`)) +
geom_point() +
ggtitle("Random forest backtesting: Viability") +
stat_cor(method = "spearman") +
theme_light()
print(f)
install.packages("cowplot")
library(cowplot)
plot_grid(e, f, labels = "AUTO")
f <- ggplot(viability, aes(`True.y`, `Predicted..RF.`)) +
geom_point() +
ggtitle("Random forest: Viability") +
stat_cor(method = "spearman")
plot_grid(e, f, labels = "AUTO")
e <- ggplot(transfection, aes(`True.y`, `Predicted..RF.`)) +
geom_point() +
ggtitle("Random forest: Transfection") +
stat_cor(method = "spearman")
f <- ggplot(viability, aes(`True.y`, `Predicted..RF.`)) +
geom_point() +
ggtitle("Random forest: Viability") +
stat_cor(method = "spearman")
plot_grid(e, f, labels = "AUTO")
install.packages("FSAdata")
library(FSAdata)
---
title: "R Notebook"
output: html_notebook
---
library(FSAdata)
library(FSAdata)
library(FSAdata)
data(SockeyeSR)
force(SockeyeSR)
SockeyeSR$year
SockeyeSR$spawners
SockeyeSR$recruits
plot(SockeyeSR$spawners, SockeyeSR$recruits)
?lm
lm(recruits ~ spawners, SockeyeSR)
sumary(model)
model <- lm(recruits ~ spawners, SockeyeSR)
sumary(model)
summary(model)
model(spawners)
y_hat <- predict(model, spawners)
library(FSAdata)
data(SockeyeSR)
y <- SockeyeSR$recruits
x <- SockeyeSR$spawners
plot(x, y)
model <- lm(recruits ~ spawners, SockeyeSR)
summary(model)
y_hat <- predict(model, x)
y_hat <- predict(model, SockeyeSR)
resids <- y_hat - y
plot(y, resids)
model2 <- lm(recruits ~ spawners * exp(spawners))
model2 <- lm(recruits ~ spawners * exp(spawners), SockeyeSR)
Y_new <- ln(y) - ln(x)
Y_new <- log(y) - log(x)
SockeyeSR$new_y <- Y_new
model2 <- lm(Y_new ~ spawners, SockeyeSR)
summary(model2)
y_hat2 <- predict(model2, SockeyeSR)
resids2 <- y_hat2 - Y_new
plot(Y_new, resids2)
library(faraway)
data("sat")
sat
cols(sat)
colnames(sat)
knitr::opts_chunk$set(echo = TRUE)
summary(model)
model <- lm(total ~ ratio + expend + salary)
model <- lm(total ~ ratio + expend + salary, sat)
summary(model)
colnames(sat)
summary(model2)
model2 <- lm(total ~ takers + ratio + expend + salary, sat)
summary(model2)
y_hat <- predict(model2, sat)
y <- sat$total
resids <- y_hat - y
plot(y, resids)
plot(y_hat, resids)
plot(y, resids)
plot(y_hat, resids)
qqnorm(resids, pch = 1, frame = FALSE)
qqline(my_data$len, col = "steelblue", lwd = 2)
qqline(resids, col = "steelblue", lwd = 2)
qqnorm(resids, pch = 1, frame = FALSE)
qqline(resids, col = "steelblue", lwd = 2)
qqnorm(resids, pch = 1, frame = FALSE)
qqline(resids, col = "steelblue", lwd = 2)
summary(influence.measures(model2))
knitr::opts_chunk$set(echo = TRUE)
library("MASS")
library("MASS")
data(hills)
hills <- lm(time ~ dist + climb, hills)
summary(hills)
par(mfrow = c(2, 2))
plot(hills)
hills2 <- update(hills, subset = (rownames(hills) != "Knock Hill"))
summary(hills2)
hills2 <- update(hills, subset = (rownames(hills) != "Knock Hill"))
library("MASS")
data(hills)
hills1 <- lm(time ~ dist + climb, hills)
summary(hills1)
par(mfrow = c(2, 2))
plot(hills1)
hills2 <- update(hills1, subset = (rownames(hills) != "Knock Hill"))
summary(hills2)
```{r}
hills_newdat <- subset(hills, (rownames(hills) != "Knock Hill"))
hills_newdat <- subset(hills, (rownames(hills) != "Knock Hill"))
plot(hills_newdat$climb, residuals(hills2), + coef(hills2)['climb'] * hills_newdat$climb,
xlab = "climb", ylab = "partial residual")
plot(hills_newdat$climb, residuals(hills2) + coef(hills2)['climb'] * hills_newdat$climb,
xlab = "climb", ylab = "partial residual")
abline(0, coef(hills2)['climb'])
qf(0.95, 4, 30)
pf(2.6896, 4, 30)
pf(2.6896, 4, 30, lower.tail = FALSE)
pf(5.573, 4, 30, lower.tail = FALSE)
library(car)
outlierTest(hills1)
```{r}
library(car)
outlierTest(hills1)
library("MASS")
data(hills)
# Part a
hills1 <- lm(time ~ dist + climb, hills)
summary(hills1)
par(mfrow = c(2, 2))
plot(hills1)
outlierTest(hills2)
hills2 <- update(hills1, subset = (rownames(hills) != "Knock Hill"))
summary(hills2)
par(mfrow = c(2, 2))
plot(hills2)
hills_newdat <- subset(hills, (rownames(hills) != "Knock Hill"))
plot(hills_newdat$climb, residuals(hills2) + coef(hills2)['climb'] * hills_newdat$climb,
xlab = "climb", ylab = "partial residual")
abline(0, coef(hills2)['climb'])
plot(hills_newdat$climb, residuals(hills2) + coef(hills2)['climb'] * hills_newdat$climb,
xlab = "climb", ylab = "partial residual")
hills3 <- lm(time ~ dist + climb + I(climb^2), hills)
summary(hills3)
hills3 <- lm(time ~ dist + climb + I(climb^2), hills)
summary(hills3)
par(mfrow = c(2, 2))
plot(hills2)
# Part a
library(FSAdata)
data(SockeyeSR)
y <- SockeyeSR$recruits
x <- SockeyeSR$spawners
plot(x, y)
model <- lm(recruits ~ spawners, SockeyeSR)
summary(model)
# Part b
y_hat <- predict(model, SockeyeSR)
resids <- y_hat - y
plot(y, resids)
# There are deviations from Gauss Markov conditions. The residuals are
# correlated across y (ie. there seems to be a relationship between the
# residuals and y). Thus, a simple linear model may not be appropriate.
knitr::opts_chunk$set(echo = TRUE)
# Problem 1
library("MASS")
data(hills)
# Part a
hills1 <- lm(time ~ dist + climb, hills)
summary(hills1)
par(mfrow = c(2, 2))
plot(hills1)
library(car)
outlierTest(hills1)
hills2 <- update(hills1, subset = (rownames(hills) != "Knock Hill"))
summary(hills2)
par(mfrow = c(2, 2))
plot(hills2)
# Part d:
hills_newdat <- subset(hills, (rownames(hills) != "Knock Hill"))
plot(hills_newdat$climb, residuals(hills2) + coef(hills2)['climb'] * hills_newdat$climb,
xlab = "climb", ylab = "partial residual")
abline(0, coef(hills2)['climb'])
# Part e:
hills3 <- lm(time ~ dist + climb + I(climb^2), hills)
summary(hills3)
par(mfrow = c(2, 2))
plot(hills2)
hills3 <- update(hills2, subset = (rownames(hills) != "Bens of Jura"))
summary(hills3)
par(mfrow = c(2, 2))
plot(hills2)
hills3 <- update(hills2, subset = (rownames(hills) != "Bens of Jura"))
summary(hills3)
par(mfrow = c(2, 2))
plot(hills3)
hills3 <- update(hills2, subset = (rownames(hills) != c("Bens of Jura", "Knock Hill")))
summary(hills3)
par(mfrow = c(2, 2))
plot(hills3)
summary(hills3)
qf(1-0.01, 2, 147, lower.tail = FALSE)
qf(0.95, 2, 147, lower.tail = FALSE)
pf(33.881, 2, 147, lower.tail = FALSE)
qt(0.01/2, 18)
pt(72.28, 18)
pt(72.28, 18, lower.tail = FALSE)
qf(2.0284, 1, 18)
qf(2.0284, 1, 18, lower.tail = FALSE)
qf(0.99, 1, 18)
2.87^2
pf(72.28, 1, 18)
pf(72.28, 1, 18, lower.tail = FALSE)
pf(5224.64), 1, 18, lower.tail = FALSE)
pf(5224.64, 1, 18, lower.tail = FALSE)
qt(0.975, 18)
update.packages(ask=FALSE)
devtools::install_github("dmcable/spacexr", build_vignettes = FALSE)
install.packages("devtools")
devtools::install_github("dmcable/spacexr", build_vignettes = FALSE)
install.packages("pkgdown")
> set.seed(123)
set.seed(123)
pts = st_as_sf(data.frame(x=runif(50),y=runif(50)),coords=1:2)
install.packages("sf")
install.packages("spdep")
pts = st_as_sf(data.frame(x=runif(50),y=runif(50)),coords=1:2)
library(spdep)
pts = st_as_sf(data.frame(x=runif(50),y=runif(50)),coords=1:2)
pts$S = factor(sample(c("Presence","Absence"),nrow(pts),TRUE))
plot(pts,pch=19)
pts = st_as_sf(data.frame(x=runif(50),y=runif(50)),coords=1:2)
pts$S = factor(sample(c("Presence","Absence"),nrow(pts),TRUE))
plot(pts,pch=19)
nn5 = knn2nb(knearneigh(pts,5))
w = nb2listw(nn5, style="B")
joincount.test(pts$S, w)
pts
library(sf)
guerry_path <- system.file("extdata", "Guerry.shp", package = "rgeoda")
guerry <- st_read(guerry_path)
install.packages("rgeoda")
guerry_path <- system.file("extdata", "Guerry.shp", package = "rgeoda")
guerry <- st_read(guerry_path)
queen_w <- queen_weights(guerry)
queen_w <- rgeoda::queen_weights(guerry)
guerry["InvCrm"] <-  1 - guerry[["TopCrm"]]
lisa <- local_bijoincount(queen_w, guerry[c("TopCrm", "InvCrm")])
library(rgeoda)
lisa <- rgeoda::local_bijoincount(queen_w, guerry[c("TopCrm", "InvCrm")])
clsts<- lisa_clusters(lisa)
clsts
lisa
View(guerry)
devtools::install_github("shashidhar22/LymphoSeq2", build_vignettes = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ggmsa")
BiocManager::install("treeio")
devtools::install_github("shashidhar22/LymphoSeq2", build_vignettes = TRUE)
BiocManager::install("treeio")
BiocManager::install("treeio", force = TRUE)
devtools::install_github("shashidhar22/LymphoSeq2", build_vignettes = TRUE)
library(tidyverse)
library(LymphoSeq2)
getwd()
setwd("~/Documents/GitHub/20.440-TCR-Analysis/notebook")
study_table <- LymphoSeq2::readImmunoSeq("../data/ChemoProjTCRs/")
study_statistics <- read.table("../data/SampleOverview.tsv")
?read.table
study_statistics <- read.table("../data/SampleOverview.tsv", skip = 1)
study_statistics <- read.table("../data/SampleOverview.tsv", sep = '\t')
study_statistics
session.info()
sessionInfo()
library(tidyverse)
library(LymphoSeq2)
getwd()
study_statistics <- read.table("../data/SampleOverview.tsv", sep = '\t')
study_table <- LymphoSeq2::readImmunoSeq("../data/analysis/ChemoProjTCRs/")
study_statistics <- read.table("../data/analysis/SampleOverview.tsv", sep = '\t')
study_statistics
View(study_statistics)
study_statistics <- read.table("../data/analysis/SampleOverview.tsv",
header = TRUE, sep = '\t')
study_statistic
View(study_statistics)
library(ggplot2)
ggplot(study_statistics, aes(x = productive_simpson_clonality)) +
geom_hist()
library(ggplot2)
ggplot(study_statistics, aes(x = productive_simpson_clonality)) +
geom_hist()
ggplot(study_statistics, aes(x = productive_simpson_clonality)) +
geom_histogram()
